<?php

namespace LicenseBundle\Repository;

/**
 * UzytkownikRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UzytkownikRepository extends \Doctrine\ORM\EntityRepository {

    public function createLogin($imie, $nazwisko) {
        $imie = str_replace("'", '', iconv('utf-8', 'us-ascii//TRANSLIT//IGNORE', mb_strtolower($imie, "UTF-8")));
        $nazwisko = str_replace("'", '', iconv('utf-8', 'us-ascii//TRANSLIT//IGNORE', mb_strtolower($nazwisko, "UTF-8")));
        $dlugosc = strlen($imie);
        $warunek = TRUE;
        for ($i = 1; $i <= $dlugosc; $i++) {
            $login = substr($imie, 0, $i) . $nazwisko;
            $warunek = $this->checkIfLoginExists($login);
            if (!$warunek)
                break;
        }
        if ($warunek) {
            $login = $this->createQueryBuilder('u')
                            ->where('u.login LIKE :login')->setParameter('login', 'kadry%')
                            ->addOrderBy('u.login', 'DESC')
                            ->setMaxResults(1)
                            ->getQuery()->getResult()[0]->getLogin();
            $login = substr($login, 0, 5) . (1 + substr($login, 5));
        }
        return $login;
    }

    public function checkIfLoginExists($login) {
        $q = $this->createQueryBuilder('u')
                        ->where('u.login = :login')->setParameter('login', $login)
                        ->getQuery()->getResult();

        if (count($q)) {
            return TRUE;
        }
        return FALSE;
    }

    public function mailingList() {
        $data = $this->createQueryBuilder('u')
                        ->where('u.kierownik = 1')
                        ->getQuery()->getResult();

        $str = [];
        for ($i = 0; $i < count($data); $i++) {
            array_push($str, $data[$i]->getMail());
        }
        echo '<pre>';
        \Doctrine\Common\Util\Debug::dump($str);
        echo '</pre>';
        return $str;
    }

}
